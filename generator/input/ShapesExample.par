Script Shape{
    on getArea();
}

Script ShapeManager{
    on calcArea();
    on areaResult(double result);
    on printArea();
}

Actor House follows Shape, ShapeManager{
	State{
        int resultsRecieved;
        double area;
    }
	Knows{Shape Square; Shape Triangle; ShapeManager manager;}
	Spawn(double houseWidth, double houseHeight){
		State.resultsRecieved = 0;
		State.area = 0.0;
        Knows.Square = Spawn Square((2/3) * houseHeight, houseWidth);
        Knows.Triangle = Spawn Triangle((1/3) * houseHeight, houseWidth);
    }

    on calcArea(){
        Knows.Square <- getArea();
        Knows.Triangle <- getArea();
    }

    on areaResult(double result){
        if (State.resultsRecieved > 0){
            State.area = State.area + result;
        }
        else{
            State.area = result;
            State.resultsRecieved = State.resultsRecieved + 1;
        }
    }

    on printArea(){
        print("here is the house area: " + State.area);
    }

    on getArea(){
        Knows.manager <- areaResult( State.area );
    }
}

Actor Square follows Shape{
	State{
		double height;
		double length;
    }
	Knows{Square square; ShapeManager manager;}
    Spawn(double height, double length){
        State.height = height;
        State.length = length;
    }

    on getArea(){
        Knows.manager <- areaResult( State.height * State.length );
    }
}

Actor Triangle follows Shape{
	State{
		double height;
		double baseLength;
    }
	Knows{Triangle triangle; ShapeManager manager;}
    Spawn(double height, double baseLength){
        State.height = height;
        State.baseLength = baseLength;
    }

    on getArea(){
        Knows.manager <- areaResult( State.height * ( 2 / State.baseLength ) );
    }
}

Actor CircleManager follows Shape, ShapeManager{
	State{
        double area;
    }
	Knows{Shape circle; ShapeManager manager;}
    Spawn(double radius){
        State.area = 0;
        Knows.circle = Spawn Circle(radius);
    }

    on calcArea(){
        Knows.circle <- getArea();
    }

    on areaResult(double result){
        State.area = result;
    }

    on printArea(){
        print("here is the circle area: " + State.area);
    }

    on getArea(){
        Knows.manager <- areaResult( State.area );
    }
}

Actor Circle follows Shape{
	State{
        double radius;
    }
	Knows{ShapeManager manager;}
	Spawn(double radius){
        State.radius = radius;
    }

    on getArea(){
        Knows.manager <- areaResult( State.radius * State.radius * 3.14 );
    }
}

Actor ShapesManager follows Shape, ShapeManager{
	State{
		int resultsRecieved;
        double area;
    }
	Knows{Shape shape1; Shape shape2; Shape shape3; ShapesManager manager;}
	Spawn(){
	    State.resultsRecieved = 0;
	}

    on getShapes(Shape shape1, Shape shape2, Shape shape3){
        Knows.shape1 = shape1;
        Knows.shape2 = shape2;
        Knows.shape3 = shape3;
    }

    on calcArea(){
        Knows.shape1 <- getArea();
        Knows.shape2 <- getArea();
        Knows.shape3 <- getArea();
    }

    on areaResult(double result){
        if (State.resultsRecieved > 2){
            State.area = State.area + result;
        }
        else{
            State.area = result;
            State.resultsRecieved = State.resultsRecieved + 1;
        }
    }

    on printArea(){
        print("here is the managers area: " + State.area);
    }

    on getArea(){
        Knows.manager <- areaResult( State.area );
    }
}
main(){

	CircleManager circle = Spawn CircleManager(5);
	ShapesManager manager = Spawn ShapesManager();
	Shape shape1 = Spawn House(7,5, manager);
    Shape shape2 = Spawn House(13,3, manager);
    Shape shape3 = Spawn Circle(10, manager);
    manager <- getShapes(shape1, shape2, shape3);
    House house = Spawn House(10, 7, manager);
	house <- calcArea();
	circle <- calcArea();
	manager <- calcArea();
	house <- printArea();
	circle <- printArea();
	manager <- printArea();
}
