Script MatrixManager{
    on getResult(int[] result, int index, RowCalculator sender);
}

main(){
    int n = 100;
    int[n][n] matrix1;
    int[n][n] matrix2;

    for(int i = 0; i < n; i = i + 1){
        for(int j = 0; j < n; j = j + 1){
            matrix1[i][j] = (i + j) % 9 + 1;
            matrix2[i][j] = (i + j) % 9 + 1;
        }
    }
    MatrixCalculator matrixCalc = Spawn MatrixCalculator(matrix1, matrix2);
}

Actor MatrixCalculator follows MatrixManager{
    State{
        int[100][100] resultMatrix;
        int resultsReceived = 0;
    }
    Knows{MatrixPrinter printer;}
    Spawn(int[][] matrix1, int[][] matrix2){
        RowCalculator[100] rowArr;
        for(int i = 0; i < 100; i = i +1){
            RowCalculator rowCalc = Spawn RowCalculator(self);
            rowArr[i] = rowCalc;
        }

        for(int i = 0; i < 100; i = i + 1){
            int [100] row;
            for (int j = 0; j < 100; j = j+1){
                row[j] = matrix1[i][j];
            }
            rowArr[i] <- calculateRow(row, matrix2, i);
        }
    }

    on getResult(int[] result, int index, RowCalculator sender){
        for(int i = 0; i < 100; i = i+1){
            State.resultMatrix[index][i] = result[i];
        }
        sender <- kill();
        if (State.resultsReceived == 99){
            KILL;
        }
        State.resultsReceived = State.resultsReceived + 1;
    }
}

Actor RowCalculator{
    State{
        int[100] resultRow;
    }
    Knows{MatrixManager parent;}
    Spawn(MatrixManager parent){
        Knows.parent = parent;
    }

    on calculateRow(int[] row, int[][] matrix, int index){
        for(int i = 0; i < 100; i = i+1){
            State.resultRow[i] = 0;
            for(int j = 0; j < 100; j = j+1){
                State.resultRow[i] = State.resultRow[i] + row[j] * matrix[i][j];
            }
        }
        Knows.parent <- getResult(State.resultRow, index, self);
    }

    on kill(){
        KILL;
    }
}